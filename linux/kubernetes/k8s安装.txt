安装vim:yum install vim -y
安装wget:yum install wget -y

错误：Failed to set locale, defaulting to C
echo "export LC_ALL=en_US.UTF-8"  >>  /etc/profile
source /etc/profile

1、hostnamectl set-hostname k8s-node1
2、关闭防火墙:
    systemctl stop firewalld
    systemctl disable firewalld
    setenforce 0
    #查看防火墙状态
    firewall-cmd --state
3、关闭swap
    swapoff -a
    vim /etc/fstab
    #/dev/mapper/centos-swap swap                    swap    defaults        0 0

#安装docker

1、卸载旧版本
# 在 master 节点和 worker 节点都要执行
sudo yum remove -y docker \
docker-client \
docker-client-latest \
docker-common \
docker-latest \
docker-latest-logrotate \
docker-logrotate \
docker-selinux \
docker-engine-selinux \
docker-engine

2、设置 yum repository
# 在 master 节点和 worker 节点都要执行
sudo yum install -y yum-utils device-mapper-persistent-data vm2
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

3、containerd版本问题：
wget https://download.docker.com/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm
yum -y localinstall containerd.io-1.2.6-3.3.el7.x86_64.rpm

4、安装并启动 docker
# 在 master 节点和 worker 节点都要执行
sudo yum install -y docker-ce-18.09.7 docker-ce-cli-18.09.7 containerd.io
sudo systemctl enable docker
sudo systemctl start docker
检查 docker 版本 ：docker version

#安装 nfs-utils
1、执行安装命令
# 在 master 节点和 worker 节点都要执行
sudo yum install -y nfs-utils
必须先安装 nfs-utils 才能挂载 nfs 网络存

#K8S基本配置
1、配置K8S的yum源
# 在 master 节点和 worker 节点都要执行
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF

2、关闭 防火墙、SeLinux、swap
# 在 master 节点和 worker 节点都要执行
systemctl stop firewalld
systemctl disable firewalld

setenforce 0
sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config

swapoff -a
yes | cp /etc/fstab /etc/fstab_bak
cat /etc/fstab_bak |grep -v swap > /etc/fstab

3、修改 /etc/sysctl.conf
# 在 master 节点和 worker 节点都要执行
vim /etc/sysctl.conf
向其中添加
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1

执行命令以应用
sysctl -p

4、安装kubelet、kubeadm、kubectl
# 在 master 节点和 worker 节点都要执行
yum install -y kubelet-1.15.1 kubeadm-1.15.1 kubectl-1.15.1

5、修改docker Cgroup Driver为systemd
# 在 master 节点和 worker 节点都要执行
vim /usr/lib/systemd/system/docker.service
向其中添加
在[service]ExecStart的最后面加上
 --exec-opt native.cgroupdriver=systemd

6、设置 docker 镜像
执行以下命令使用 docker 国内镜像，提高 docker 镜像下载速度和稳定性
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://bd9lh1mq.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
systemctl enable kubelet && systemctl start kubelet


#初始化 master 节点
    以 root 身份在 demo-master-a-1 机器上执行

    配置 apiserver.demo 的域名

    # 只在 master 节点执行
    echo "x.x.x.x  apiserver.demo" >> /etc/hosts
    请替换其中的 x.x.x.x 为您的 demo-master-a-1 的实际 ip 地址

    创建 ./kubeadm-config.yaml

    # 只在 master 节点执行
    cat <<EOF > ./kubeadm-config.yaml
    apiVersion: kubeadm.k8s.io/v1beta1
    kind: ClusterConfiguration
    kubernetesVersion: v1.15.1
    imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers
    controlPlaneEndpoint: "apiserver.demo:6443"
    networking:
    podSubnet: "10.100.0.1/20"
    EOF
    podSubnet 所使用的网段不能与节点所在的网段重叠

    初始化 apiserver

    # 只在 master 节点执行
    kubeadm init --config=kubeadm-config.yaml --upload-certs
    根据您服务器网速的情况，您需要等候 1 – 10 分钟

    初始化 root 用户的 kubectl 配置

    # 只在 master 节点执行
    rm -rf /root/.kube/
    mkdir /root/.kube/
    cp -i /etc/kubernetes/admin.conf /root/.kube/config
    安装 calico

    # 只在 master 节点执行
    kubectl apply -f https://docs.projectcalico.org/v3.6/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
    安装calico， 请参考https://docs.projectcalico.org/v3.6/getting-started/kubernetes/

    等待calico安装就绪：

    执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态

    # 只在 master 节点执行
    watch kubectl get pod -n kube-system
    检查 master 初始化结果

    在 master 节点 demo-master-a-1 上执行

    # 只在 master 节点执行
    kubectl get nodes

    #获得 join命令参数
    在 master 节点 demo-master-a-1 节点执行

    # 只在 master 节点执行
    kubeadm token create --print-join-command
    可获取kubeadm join 命令及参数，如下所示
    # kubeadm token create 命令的输出
    kubeadm join apiserver.demo:6443 --token ofkv6j.n5t907lpatdu9pki  --discovery-token-ca-cert-hash sha256:8d819d016549a16f8183affe4a082c505f3a9e2d29b75fa63071d7ee2305be2c 

#初始化 worker节点
    针对所有的 worker 节点执行
    # 只在 worker 节点执行
    echo "192.168.1.70  apiserver.demo" >> /etc/hosts
    kubeadm join apiserver.demo:6443 --token ofkv6j.n5t907lpatdu9pki  --discovery-token-ca-cert-hash sha256:8d819d016549a16f8183affe4a082c505f3a9e2d29b75fa63071d7ee2305be2c

#检查初始化结果
    在 master 节点 demo-master-a-1 上执行
    # 只在 master 节点执行
    kubectl get nodes

#移除 worker 节点
    正常情况下，您无需移除 worker 节点，如果添加到集群出错，您可以移除 worker 节点，再重新尝试添加
    在准备移除的 worker 节点上执行
    # 只在 worker 节点执行
    kubeadm reset
    在 master 节点 demo-master-a-1 上执行

    # 只在 master 节点执行
    kubectl delete node demo-worker-x-x
    将 demo-worker-x-x 替换为要移除的 worker 节点的名字
    worker 节点的名字可以通过在节点 demo-master-a-1 上执行 kubectl get nodes 命令获得

#安装 Ingress Controller
    在 demo-master-a-1 上执行

    # 只在 master 节点执行
    kubectl apply -f https://raw.githubusercontent.com/eip-work/eip-monitor-repository/master/dashboard/nginx-ingress.yaml
    配置域名解析

    将域名 *.demo.yourdomain.com 解析到 demo-worker-a-2 的 IP 地址 z.z.z.z （也可以是 demo-worker-a-1 的地址 y.y.y.y）

    验证配置

    在浏览器访问 a.demo.yourdomain.com，将得到 404 NotFound 错误页面

    由于需要申请域名，过程会比较繁琐，有如下两种替代方案：

    在您的客户端机器（访问部署在K8S上的 web 应用的浏览器所在的机器）设置 hosts 配置；
    暂时放弃域名的配置，临时使用 NodePort 或者 kubectl port-forward 的方式访问部署在 K8S 上的 web 应用
    如果您打算将您安装的 Kubernetes 用于生产环境，请参考此文档 Installing Ingress Controller，完善 Ingress 的配置